#+TITLE: TSP问题求解
#+DATE: 2016-09-06
#+SETUPFILE: ~/blog/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: notes
#+JEKYLL_TAGS: java tutorial
#+JEKYLL_PUBLISHED: true

* 什么是 /TSP问题/ ?
** 定义
  TSP问题（Traveling Salesman Problem）即旅行商问题又译为旅行推销员问题、货郎担问题，是数学领域中著名问题之一。
假设有一个旅行商人要拜访n个城市，他必须选择所要走的路径，路径的限制是每个城市只能拜访一次，而且最后要回到原来出
发的城市。路径的选择目标是要求得的路径路程为所有路径之中的最小值。
** 特点
  TSP问题是一个组合优化问题，是 *图论* 中最著名的问题之一（即“已给一个N个点的完全图，每条边有一个长度，求总长度最短
的经过每个顶点正好一次的封闭回路”），且具有 *NPC计算复杂性* 。
** 限制
这里考虑的TSP问题中任意两个城市都存在路径且来回距离是相等的，用图论的知识对TSP建模，则城市是图的顶点，路径是图的
边，那么这里的TSP问题可以等价为用对一个 *无向加权完全图* 求封闭回路。
-----
* 求解算法
求解TSP问题的算法有很多，如贪心算法，遗传算法，蚁群算法，模拟褪火算法，粒子群算法等等。这里选取前三种算法来求解。
- *贪心算法* 顾名思义，贪心算法求解过程中每次只考虑当前情况下的最优结果，算法简单容易实现，求解速度快。但求得结果往往不是全局最优解。
- *遗传算法* 遗传算法是一种具有全局搜索能力的智能算法，对求解TSP问题效果相当不错。
- *蚁群算法* 蚁群算法是根据自然界中蚂蚁发现路径的行为而发明的用于寻求优化路径的机率型算法。
-----
* 算法步骤及效果评估
** 准备工作
假设输入为N个城市及城市的坐标。对所有城市进行编号，依次为N_1 ,N_2 ...N_n 以描述得到解的路径，然后根据各点坐标求解任意两点间距离并用
一张表（可以是一个二维数组）存储起来为后面求解作准备。
** 贪心算法
*** 具体步骤 
1. 选取任意点N_i 作为起点（1\le i \le n），并将该点加入路径（开始路径为空）；
2. 从所有不在路径中的点中选取离最新加入路径的点最近的点加入路径；
3. 重复步骤2直至所有点均加入路径，此时按照各点加入路径的顺序连接各点并连接起点和终点形成的回路便是求得解。
#+BEGIN_EXPORT html
<img src="/images/tsp01.png" alt="Drawing" width="400px" />
#+END_EXPORT
*** 结果评估
输入为标准51个城市数据。一般随机选取起点，然后按算法步骤求得解即
为最终结果。这里分别把每个城市作为起点进行计算，取其中最优解做为最终结果，更为合理。
** 遗传算法
*** 具体步骤
1. 设置种群个体数，最优个体复制率，变异率，迭代次数；
2. 初始化种群（这里将每次随机生成的路径看作种群个体）；
3. 计算个体适应度（按照每条路径计算回路长度，长度越短适应度越高，可设置适应度为长度倒数）；
4. 根据适应度找到最优个体并根据复制率复制该个体，然后按适应度排序移除排名靠后个体；
5. 按照变异率随机选取个体变异；
6. 重复3-5步骤若干次数（迭代次数）。
#+BEGIN_EXPORT html
<img src="/images/tsp02.png" alt="Drawing" width="400px" />
#+END_EXPORT
*** 结果评估
输入数据同上。按上述步骤求解。这里设置种群个体数为100, 变异率为0.1, 最优个体复制率为0.1, 迭代次数为200次。
** 蚁群算法
*** 具体步骤
1. 设置迭代次数（每只蚂蚁跑完一圈视为一次迭代），蚂蚁数量（这里在每个城市放置一只蚂蚁即蚂蚁数等于城市数），信息素挥发率；
2. 分别在每个城市放置一个蚂蚁，并标记（已访问过的蚂蚁不能再次访问该城市），初始化每个城市的信息素浓度（按照距离越短信息素浓度越高的原则）；
3. 根据信息素浓度为每只蚂蚁选择下一个访问城市，并对每个城市根据当前蚂蚁数量更新信息素浓度；
4. 重复步骤3至所有城市均访问过；
5. 挥发信息素
6. 重复步骤3-5若干次（迭代次数）。
#+BEGIN_EXPORT html
<img src="/images/tsp03.png" alt="Drawing" width="400px" />
#+END_EXPORT
*** 结果评估
输入数据同上。按上述步骤求解。这里设置蚂蚁数量等于城市数量，迭代次数为200次。
