#+TITLE: 软件测试复习笔记
#+DATE: 2018-01-02
#+SETUPFILE: ~/blog/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: review 
#+JEKYLL_TAGS: exam
#+JEKYLL_PUBLISHED: true


** 绪言 
*** 软件质量问题的原因 
- 需求不清
- 缺乏有效的项目管理
- 缺乏有效的开发方法
- 不遵守开发标准和规范
- 软件开发工具引起
*** 软件质量属性
**** 产品修改
可理解性；可维护性；可测试性；灵活性
**** 产品转移
可移植性；可重用性；互运行性
**** 产品运行
正确性；效率；健壮性；风险；完整性；可用性
*** 从三个方面考察软件质量
*资源；过程；产品*
| 考察角度 | 内容                 |
|----------+----------------------|
| 资源质量 | 人员培训，供应链控制 |
| 过程质量 | CMM过程管理          |
| 产品质量 | 代码、文档、数据     |
#+BEGIN_EXPORT html
<img src="/images/softtest01.png" alt="Drawing" width="400px" />
#+END_EXPORT
*** 软件测试流程
测试需求；测试计划；测试设计；测试执行；测试管理
** 软件测试基础
*** 基本术语
**** 测试用例(test case)
为特定目的而设计的一组测试输入，执行条件和预期输出
**** 测试池(test pool)
供选择的测试用例的集合
**** 测试集(test suite)
一轮测试中所选中的测试用例的集合
*** 缺陷分类
*从外部需求的满足情况*
#+BEGIN_EXPORT html
<img src="/images/softtest02.png" alt="Drawing" width="400px" />
#+END_EXPORT
*从软件内部设计*
1. 输入或输出缺陷
2. 逻辑缺陷
3. 计算缺陷
4. 接口缺陷
5. 数据缺陷
*** 测试用例
*评价*
- 检测软件缺陷的有效性
- 测试用例本身的可重用性，经济性，可维护性 
*** 测试目的
**** 测试是程序的执行过程，目的是发现错误
**** 检查系统是否满足需求
**** *根本目的*
***** 发现错误
***** 通过测试的错误来改进软件开发过程中存在的缺陷
*** 测试的阶段
#+BEGIN_EXPORT html
<img src="/images/softtest03.png" alt="Drawing" width="400px" />
#+END_EXPORT
*** 软件测试技术
**** 黑盒测试（功能性）和白盒测试（结构性）
|          | 优点                                   | 缺点                     |
|----------+----------------------------------------+--------------------------|
| 黑盒测试 | 与软件如何实现无关，可适应实现变化     | 测试用例之间可能存在冗余 |
|          | 测试开发可与实现并行                   | 测试用例局限于已描述行为 |
| 白盒测试 | 定义了丰富的覆盖率指标体系便于度量管理 | 难以测试遗漏功能         |
**** 静态测试和动态测试
**** 传统测试和面向对象测试
**** 特定环境及应用的测试
** 黑盒测试
*** 测试需求的描述
**** 需求跟踪矩阵
**** 用例场景
*** 测试规格的描述
*** 其他常用测试技术
**** 随机测试法
**** 等价类划分法
**** 边界值分析法
**** 正交实验设计法
** 白盒测试
*** 常见白盒测试方法
**** 静态测试
- 人工代码检查
- 软件度量
- 程序分析与推理
- 风格检查
**** 动态测试
- 覆盖测试分析
- 运行时错误检查
*** 覆盖测试 
#+BEGIN_EXPORT html
<img src="/images/softtest04.png" alt="Drawing" width="400px" />
#+END_EXPORT
** 单元测试
*** 目的
- 检查代码是否符合设计和规范，保证局部代码的质量
- 尽早发现错误，快速编程反馈
*** 主要内容
*主要关注内部处理逻辑和数据结构*
- 模块接口测试
- 局部数据结构测试
- 独立路径测试
- 错误处理测试
- 边界测试
*** 过程
1. 实例化别测试对象
2. 提供测试数据
3. 调用被测试的方法
4. 验证测试结果
*** 单元测试的工具 junit
#+BEGIN_EXPORT html
<img src="/images/softtest05.png" alt="Drawing" width="400px" />
#+END_EXPORT
** 集成测试
#+BEGIN_EXPORT html
<img src="/images/softtest06.png" alt="Drawing" width="400px" />
#+END_EXPORT
*** 集成策略
**** 非渐增式测试策略
分别测试每个模块，然后组装所有模块成需要的程序
适用于规模较小的系统且难以定位错误
**** 渐增式测试策略
每次把下一个要测试的模块同已测试好的模块组合起来进行测试
容易定位错误，但测试周期长
***** 测试方法
- 自顶向下
- 自底向上
- 混合式集成
#+BEGIN_EXPORT html
<img src="/images/softtest07.png" alt="Drawing" width="400px" />
#+END_EXPORT 
** 系统测试
#+BEGIN_EXPORT html
<img src="/images/softtest08.png" alt="Drawing" width="400px" />
#+END_EXPORT
*** 功能性测试
- 功能符合性的测试
- 标准的测试
*** 非功能性测试
- 兼容性测试
- 可用性测试
- 安全性测试
- 可靠性测试
- 国际化测试
 

